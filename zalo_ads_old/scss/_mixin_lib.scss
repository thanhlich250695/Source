@mixin clearfix() {
  &:after {
    content: " ";
    display: table;
    clear:   both;
  }
}

@mixin rounded($border-radius) {
  -webkit-border-radius: $border-radius;
  -moz-border-radius: $border-radius ;
   border-radius: $border-radius;
}

@mixin box-shadow($arguments) {
  -webkit-box-shadow: $arguments;
  -moz-box-shadow: $arguments;
  box-shadow: $arguments;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: ($opacity * 100);
  filter: #{alpha(opacity=$opacity-ie)};
}

@mixin border($width: 1px, $color:null, $style:solid){
  border-width: $width;
  border-color: $color;
  border-style: $style;
}

// verticle middle 
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// hide text 
@mixin hide-text {
  text-indent: 200%;
  white-space: nowrap;
  overflow: hidden;
}

// fluid

@mixin fluid {
  border-collapse: separate;
  display: table;
  table-layout: fixed;
  width: 100%;
  > .block { 
    display: table-cell;
    float: none;
    width: 100%;
  }
}

// caption
@mixin image-caption{
  position: relative; display:block;
  img.img-responsive { width: 100%}
  span { width: 100%; padding: 10px; position:absolute; bottom:0px}
}


// media queries

@mixin MQ($canvas) {
  @if $canvas == xs { 
   @media only screen and (max-width: $sc-sm - 1) { @content; } 
  }
  @else if $canvas == sm { 
   @media only screen and (min-width: $sc-sm) { @content; } 
  }
  @else if $canvas == md {
   @media only screen and (min-width: $sc-md) { @content; } 
  }
  @else if $canvas == lg {
   @media only screen and (min-width: $sc-lg) { @content; } 
  }
  @else if $canvas == xxl {
   @media only screen and (min-width: $sc-xxl) { @content; } 
  }
  // @else if $canvas == smd {
  //  @media only screen and (min-width: $sc-sm + 1) and (max-width: $sc-md - 1) { @content; } 
  // }
  @else if $canvas == smd {
   @media only screen and (max-width: $sc-md - 1) { @content; } 
  }
}

// position

@mixin position ($position: relative, $coordinates: null null null null) {

  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $coordinates: unpack($coordinates);

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: $position;

  @if ($top and $top == auto) or (type-of($top) == number) {
    top: $top;
  }

  @if ($right and $right == auto) or (type-of($right) == number) {
    right: $right;
  }

  @if ($bottom and $bottom == auto) or (type-of($bottom) == number) {
    bottom: $bottom;
  }

  @if ($left and $left == auto) or (type-of($left) == number) {
    left: $left;
  }
}

// fonts

@mixin fonts ($font-family, $font-size: null, $font-weight: null) {
  font-family: $font-family;
  $size: nth($font-size, 1);
  $weight: nth($font-weight, 1);
  @if ($size and $size == auto) or (type-of($size) == number) {
    font-size: $size;
  }
  @if ($weight and $weight == auto) or (type-of($weight) == number) {
    font-weight: $weight;
  }
}

// animation

@mixin animate-prefixer($property, $value...) {
    -webkit-#{$property}: unquote($value);
    -moz-#{$property}: unquote($value);
    -o-#{$property}: unquote($value);
    #{$property}: unquote($value);
    -webkit-animation-fill-mode : both  ;
    animation-fill-mode : both  ;
}

@mixin animate-keyframe($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @-moz-keyframes #{$animation-name} {
        @content;
    }

    @-o-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}